// Set @total-width to 100% for a fluid layout
@total-width: 960px;

// Clearfix Mixin
.clearfix() {
    &:before,
    &:after {
        content: "\0020";
        height: 0;
        display: block;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }
}

#mixed {
    .row(@mar: @base-margin)    {

        // Variables
        @grid-margin: 1rem * ((@mar / 2) / @root-text-size);

        // Create
        margin-left: -@grid-margin;
        margin-right: -@grid-margin;

        // Mixins
        .clearfix();
        //.inline-block-fallback();
    }
    .grid-column(@float: left)  {
        display: inline;
        float: @float;
    }
    .grid-padding(@mar: @base-margin)   {
    
        // Variables
        @grid-margin: 1rem * ((@mar / 2) / @root-text-size);
    
        // Create
        padding-left: @grid-margin;
        padding-right: @grid-margin;
    }
}
#mixins {
    .grid-loop ( @int, @total, @pre ) when ( @int > 0 ) and ( @total > 4 ) {
        
        @width: round( ( 100% * ( @int / @total ) ), 5 );

        #mixins > .grid-create( @int, @total, @pre, @width );
        #mixins > .grid-loop( @int - 1, @total, @pre );
    }
    .grid-loop ( 0, @total ) {}
    .grid-loop ( @int, 4 ) {}
}
#mixins {
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = m ) and ( @width = 75% ) {
        [class*="m-@{int}of@{total}"] {
            &:extend( .gm-three-quarters );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = m ) and ( @width = 66.66667% ) {
        [class*="m-@{int}of@{total}"] {
            &:extend( .gm-two-thirds );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = m ) and ( @width = 50% ) {
        [class*="m-@{int}of@{total}"] {
            &:extend( .gm-half );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = m ) and ( @width = 33.33333% ) {
        [class*="m-@{int}of@{total}"] {
            &:extend( .gm-third );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = m ) and ( @width = 25% ) {
        [class*="m-@{int}of@{total}"] {
            &:extend( .gm-quarter );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = s ) and ( @width = 75% ) {
        [class*="s-@{int}of@{total}"] {
            &:extend( .gs-three-quarters );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = s ) and ( @width = 66.66667% ) {
        [class*="s-@{int}of@{total}"] {
            &:extend( .gs-two-thirds );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = s ) and ( @width = 50% ) {
        [class*="s-@{int}of@{total}"] {
            &:extend( .gs-half );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = s ) and ( @width = 33.33333% ) {
        [class*="s-@{int}of@{total}"] {
            &:extend( .gs-third );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = s ) and ( @width = 25% ) {
        [class*="s-@{int}of@{total}"] {
            &:extend( .gs-quarter );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = l ) and ( @width = 75% ) {
        [class*="l-@{int}of@{total}"] {
            &:extend( .gl-three-quarters );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = l ) and ( @width = 66.66667% ) {
        [class*="l-@{int}of@{total}"] {
            &:extend( .gl-two-thirds );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = l ) and ( @width = 50% ) {
        [class*="l-@{int}of@{total}"] {
            &:extend( .gl-half );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = l ) and ( @width = 33.33333% ) {
        [class*="l-@{int}of@{total}"] {
            &:extend( .gl-third );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when ( @pre = l ) and ( @width = 25% ) {
        [class*="l-@{int}of@{total}"] {
            &:extend( .gl-quarter );
        }
    }
    .grid-create ( @int, @total, @pre, @width ) when not ( @width = 25% ) and not ( @width = 33.33333% ) and not ( @width = 50% ) and not ( @width = 66.66667% ) and not ( @width = 75% ) {
        [class*="@{pre}-@{int}of@{total}"] {
            width: @width;
        }
    }
}
#mixins {
    .grid-all ( @int, @total, @pre ) when ( @int > 0 ) and ( @total > 4 ) {
        #mixins > .grid-loop( @int, @total, @pre );
        #mixins > .grid-all( @total - 2, @total - 1, @pre );
    }
    .grid-all ( 0, @total, @pre ) {}
    .grid-all ( @int, 4, @pre ) {}
}
