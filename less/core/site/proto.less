/*

Config

*/

// Color Variables
@white: @brand-1;
@dark-blue: @brand-2;
@blueprint: @interactive-primary;
@dark-blueprint: @interactive-secondary;
@light-blue: @accent-1;
@dark-grey: @neutral-1;
@light-grey: @neutral-2;

// Font Declarations
@lato: "Lato", @stack-sans-serif;

// This is how you'd import the Lato font straight from the folder:

// @lato-light: "Lato Light", @stack-sans-serif;
// @lato-regular: "Lato Regular", @stack-sans-serif;
// @lato-bold: "Lato Bold", @stack-sans-serif;
// @lato-black: "Lato Black", @stack-sans-serif;


/*

Font Faces

*/

// This is how you'd import the Lato font straight from the folder:

// Lato
// @font-face {
//     .m-type__web-font("Lato Light", lato, LatoLatinLight-Regular);
// }
// @font-face {
//     .m-type__web-font("Lato Regular", lato, LatoLatin-Regular);
// }
// @font-face {
//     .m-type__web-font("Lato Bold", lato, LatoLatin-Bold);
// }
// @font-face {
//     .m-type__web-font("Lato Black", lato, LatoLatinBlack-Regular);
// }

/* 

Applied Font Faces

These classes based on every typeface used on the project, including many which were 
embedded via `@font-face` declarations.

*/

.proto__lato,
.proto__lato--black {
    font-family: @lato;
}
.proto__lato {
    font-weight: 400;
}
.proto__lato--black {
    font-weight: 900;
}

/*

Type Styles

*/

h1,
h2,
h3,
h4,
h5 {
    &:extend( .proto__lato--black );
}

/*

Body Text

A quick class to help make any element's text look like the site's default body text.

*/

body,
.styles__body-text {
    &:extend( .proto__lato );
}

dt,
th,
.input-label,
strong {
    font-weight: 700;
}

/*

Blockquote

*/

.styles__blockquote {
    padding-left: @full-side;
    font-size: 128%;
    color: @dark-grey;
    border-left: 7px solid @light-grey;
}


/*

Forms

*/

input,
textarea {

    // Vars
    @inner-shadow: fadeout(@black, 95%);

    padding: @half-vertical @full-side;
    background: @white;
    border: 1px solid @light-grey;

    // Mixins
    &:extend( .body-text );
    line-height: normal;
    .m-border-radius( @default-radius );
    .m-shadow__box-shadow-inset(0, @3px, @3px, @inner-shadow);

    &:hover,
    &:focus,
    &:active,
    &.is-current {
        border-color: @dark-grey;
    }
}
textarea {
    /* Display & Box Model */
    // Why 147px? To match the height of two vertical single-line inputs
    min-height: @147px;
}

a,
.links__link {
    &:extend( .proto__lato--black );
}

/*

Tables

*/

td[data-th]:before {

    /* Pretty */
    font-weight: 700;
}
@media @medium-screens-min {
    th {
        border-bottom: @border-width solid @light-grey;
    }
    th + th,
    td + td {
        border-left: @border-width solid @light-grey;
    }
    tr + tr td {
        border-top: @border-width solid @light-grey;
    }
    tbody tr:nth-child( odd ),
    table > tr:nth-child( odd ) {
        background: lighten(@dark-grey, 30%);
    }
}

/*

Messaging

*/

.proto__bubble {

    // Variables
    @wisp-width: @5px;
    @bubble-color: @white;
    @shadow: fadeout(@black, 50%);
    @shadow-radius: @7px;

    // Create
    margin: 0;
    padding: @half-vertical;
    background-color: @bubble-color;
    position: relative;

    // Mixins
    .m-border-radius( @default-radius );
    .m-shadow__box-shadow(0, 0, @shadow-radius, @shadow);
    .m-transition(opacity, 0.15s, linear);

    &:after {
        position: absolute;
        border: @wisp-width solid transparent;
    
        // Mixins
        .m-presentational__pseudo-clear();
    }
    &.left-wisp,
    &.right-wisp {
        &:after {
            top: 50%;
            margin-top: -@wisp-width;
        }
    }
    &.left-wisp {
        &:after {
            left: -@wisp-width * 2;
            border-right-color: @bubble-color;
        }
    }
    &.right-wisp {
        &:after {
            right: -@wisp-width * 2;
            border-left-color: @bubble-color;
        }
    }
    &.top-wisp,
    &.bottom-wisp {
        &:after {
            left: 50%;
            margin-left: -@wisp-width;
        }
    }
    &.top-wisp {
        &:after {
            top: -@wisp-width * 2;
            border-bottom-color: @bubble-color;
        }
    }
    &.bottom-wisp {
        &:after {
            bottom: -@wisp-width * 2;
            border-top-color: @bubble-color;
        }
    }
}

/*

Input Alerts

*/

[class*="messaging__input-alert"] {

    // Variables
    @wisp-width: @5px;
    @bubble-color: @white;
    @shadow: fadeout(@black, 50%);
    @shadow-radius: @7px;

    // Mixins
    &:extend( .proto__bubble all );
    .m-shadow__box-shadow-none();

    padding: @quarter-vertical @half-vertical;
    color: @white;
    
    &:after {
        left: @half-vertical;
        margin-left: 0;
        top: -@wisp-width * 2;
        border-bottom-color: @bubble-color;
    }
}
.messaging__input-alert {
    &--warning {
        .m-forms__input-alert-color(@warning-color);
    }
    &--info {
        .m-forms__input-alert-color(@info-color);
    }
    &--error {
        .m-forms__input-alert-color(@error-color);
    }
    &--success {
        .m-forms__input-alert-color(@success-color);
    }
}

.no-boxshadow {
    .proto__bubble {
        border: 1px solid @dark-grey;
    }
}


/*

Form Modules

*/

.elements__attached-label {
    border: 1px solid @light-grey;
    border-radius: @default-radius;

    &:hover,
    &:focus,
    &:active,
    &.is-current {
        border-color: @dark-grey;
    }

    .label {
        text-align: center;
        padding: 0 @full-side;
        background-color: lighten(@dark-grey, 30%);
        border-left: 1px solid @light-grey;
        border-right: 1px solid @light-grey;

        &:first-child,
        + input {
            border-left: none;
        }
    }
    input,
    [class*="button"] {

        border-radius: 0;
        border: none;
    }

    input + .label,
    .label:last-child {
        border-right: none;
    }
}