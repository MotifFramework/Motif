/*

Responsive Grid

The default responsive grid in Motif is built with a few rules in mind:

1. Each row of columns must be wrapped in a row element
2. There's no need to specify if a column is first or last

With that in mind, there is a basic syntax to learn for what classes to use.
Our breakpoints are classified as:

- Base
- Small
- Medium
- Large
- Extra Large

Our default responsive grid system only uses 3 grids to cover all of our bases:

- `grid, small` covers Base and Small viewports, but cuts off at Medium
- `grid, medium` covers only Medium
- `grid, large` starts at Large and covers Extra Large as well (there is no max
cutoff value for `grid, large`)

Understanding that, the syntax should be easy to understand. In these examples,
we will talk about `grid, small`:

- **Rows**: `.gs-row` (Grid, Small, Row)
- **Columns**: `.gcs` (Grid, Column, Small)
- **Column Width**: `.gs-half` (Grid, Small, Half-Width)

    <div class="gs-row">
        <div class="gcs gs-half">...</div>
        <div class="gcs gs-half">...</div>
    </div>

However, to be slightly more succinct, you can use the condensed column syntax:

- **Columns (Condensed)**: `.gcs-half` (Grid, Column, Small, Half-Width)

    <div class="gs-row">
        <div class="gcs-half">...</div>
        <div class="gcs-half">...</div>
    </div>

In brief, the way the grid works is that `.gcs` floats the element to the left
(by default), and adds padding to both the left and the right. `-half` gives
it a width of `50%`. The combined padding of the two columns bumped up against 
each other form the full "gutter". The `.gs-row` then clears the floats and has
a *negative* margin on both the left and the right that pops the columns out to
the sides the exact width of their paddings, meaning the column content lines 
up with the site boundaries on the left and right without the need to specify 
"first" or "last" column classes.

To use this responsively, then, you just add the classes by breakpoint:

    <div class="gs-row gm-row gl-row">
        <div class="gcs-half gcm-third gcl-quarter">
            ...
        </div>
        <div class="gcs-half gcm-two-thirds gcl-three-quarters">
            ...
        </div>
    </div>

By default, the column breakdown of each grid breakpoint:

- `grid, small`: 4 columns
- `grid, medium`: 9 columns
- `grid, large`: 12 columns

For the larger grids, the classes follow the numbers closely...

    - `.gcl-10of12
    - `.gcm-4of9`

...in just about every combination (based on their total column number), but 
all of the grids also have a few "fuzzy" shortcuts as well:

    - `half`
    - `third`
    - `quarter`
    - `three-quarters`
    - `two-thirds`

*/

// Aliases for all breakpoints
// .g-halves,
// .g-thirds,
// .g-quarters {
//     // Mixins
//     #mixed > @include row( $mobile-margin );

//     /* Pretty */
//     letter-spacing: -0.31em;
//     text-rendering: optimizespeed;
        
//     ul& {
//         padding-left: 0;
//         list-style: none outside none;
//     }
    
//     > * {
//         // Mixins
//         #mixed > @include grid-column();
//         #mixed > @include grid-padding( $mobile-margin );

//         /* Display & Box Model */
//         display: inline-block;

//         /* Positioning */
//         float: none;

//         /* Pretty */
//         letter-spacing: normal;
//         word-spacing: normal;
//         vertical-align: top;
//         text-rendering: auto;
//     }
// }
// .g-halves > * {
//     width: 50%;
// }
// .g-thirds > * {
//     width: round( ( 100% / 3 ), 5 );
// }
// .g-quarters > * {
//     width: 25%;
// }

// // Opera as of 12 on Windows needs word-spacing.
// // The ".opera-only" selector is used to prevent
// // actual prefocus styling and is not required 
// // in markup.
// .opera-only :-o-prefocus,
// .g-thirds {
//     word-spacing: -0.43em;
// }

@include lyt-create();
